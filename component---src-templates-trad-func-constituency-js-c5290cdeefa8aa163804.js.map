{"version":3,"sources":["webpack:///./src/templates/TradFuncConstituency.js","webpack:///./src/components/People.js"],"names":["TradTemplateWrapper","styled","div","theme","spacing","TradHeader","Grid","CandidatesWrapper","TradFuncConstituencyTemplate","pageContext","constituency","councillors","candidates","tags","useTranslation","t","i18n","container","item","direction","justify","className","variant","color","seats","withLanguage","electors_total_2020","Number","electors_total_2016","last_election_vote_beijing_minus_demo","map","tag","label","i18nKey","c","key","node","info","filter","is_2020_candidate","PeopleWrapper","breakpoints","up","palette","warning","main","success","PeopleCircle","showName","name","onClick","navigate","getLocalizedPath","uuid","onKeyDown","camp","toLowerCase","alt","src","img_url","primary"],"mappings":"wOASMA,EAAsBC,IAAOC,IAAV,gGAAGD,CAAH,mFAEXE,IAAMC,QAAQ,GAQTD,IAAMC,QAAQ,IAI3BC,EAAaJ,YAAOK,KAAV,uFAAGL,CAAH,4EAGIE,IAAMC,QAAQ,IAS5BG,EAAoBN,IAAOC,IAAV,8FAAGD,CAAH,qEAETE,IAAMC,QAAQ,IAoEbI,UAhEsB,SAAC,GAE/B,IAAD,IADJC,YAAeC,EACX,EADWA,aAAcC,EACzB,EADyBA,YAAaC,EACtC,EADsCA,WAAYC,EAClD,EADkDA,KAClD,EACgBC,cAAZC,EADJ,EACIA,EAAGC,EADP,EACOA,KAEX,OACE,kBAAChB,EAAD,KACE,kBAACK,EAAD,CAAYY,WAAS,GACnB,kBAAC,IAAD,CAAMC,MAAI,GACR,kBAAC,IAAD,CACED,WAAS,EACTE,UAAU,SACVC,QAAQ,SACRC,UAAU,aAEV,kBAAC,IAAD,CAAYC,QAAQ,QAAQC,MAAM,iBAC/BR,EAAE,cAAe,CAAES,MAAOd,EAAac,SAE1C,yBAAKH,UAAU,SACZI,YAAaT,EAAMN,EAAc,WAIxC,kBAAC,IAAD,CAAMQ,MAAI,GACR,kBAAC,IAAD,CAAYI,QAAQ,SACdP,EAAE,oBADR,IAEIL,EAAagB,oBAFjB,SAIIC,OAAOjB,EAAagB,qBACpBC,OAAOjB,EAAakB,sBALxB,KAQA,kBAAC,IAAD,CAAYN,QAAQ,SACjBP,EAAE,aAAc,IAChBL,EAAamB,yCAIpB,kBAAC,IAAD,CAAMR,UAAU,QAAQJ,WAAS,GAC9BJ,EAAKiB,KAAI,SAAAC,GAAG,OACX,kBAAC,IAAD,CAAMC,MAAOjB,EAAE,OAAOgB,EAAIE,SAAYX,QAAQ,iBAGlD,kBAAC,IAAD,CAAYD,UAAU,QAAQC,QAAQ,SACnCG,YAAaT,EAAMN,EAAc,gBAEpC,kBAAC,IAAD,CAAYY,QAAQ,MAAMP,EAAE,uBAC5B,kBAAC,IAAD,CAAME,WAAS,GACZN,EAAYmB,KAAI,SAAAI,GAAC,OAChB,kBAAC,IAAD,CAAcC,IAAKD,EAAEE,KAAMC,KAAMH,EAAEE,WAGvC,kBAAC,IAAD,CAAYd,QAAQ,MAAMP,EAAE,aAC5B,kBAACR,EAAD,KACGK,EACE0B,QAAO,SAAAJ,GAAC,MAAiC,SAA7BA,EAAEE,KAAKG,qBACnBT,KAAI,SAAAI,GAAC,OACJ,kBAAC,IAAD,CAAcC,IAAKD,EAAEE,KAAMC,KAAMH,EAAEE,c,oCClG/C,mIAQMI,EAAgBvC,IAAOC,IAAV,4EAAGD,CAAH,2XAQfE,IAAMsC,YAAYC,GAAG,MAOrBvC,IAAMsC,YAAYC,GAAG,MAQPvC,IAAMwC,QAAQC,QAAQC,KAItB1C,IAAMwC,QAAQN,KAAKQ,KAInB1C,IAAMwC,QAAQG,QAAQD,MAY3BE,EAAe,SAAC,GAA+B,IAA7BV,EAA4B,EAA5BA,KAA4B,IAAtBW,gBAAsB,SACjDhC,EAASF,cAATE,KACFiC,EAAOxB,YAAaT,EAAMqB,EAAM,QACtC,OACE,kBAACG,EAAD,CACEnB,UAAU,yBACV6B,QAAS,WACPC,mBAASC,YAAiBpC,EAAD,YAAmBqB,EAAKgB,KAAxB,IAAgCJ,KAE3DK,UAAW,cAEX,yBAAKjC,UAAU,UACb,kBAAC,IAAD,CACEA,UAAS,UAAYgB,EAAKkB,KAAKC,cAC/BC,IAAKR,EACLS,IAAKrB,EAAKsB,UAEXX,GACC,8BAAUC,GAAwB,UAAjBZ,EAAKuB,QAAsB,IAAM","file":"component---src-templates-trad-func-constituency-js-c5290cdeefa8aa163804.js","sourcesContent":["import React from 'react';\nimport { Grid, Typography } from '@material-ui/core';\nimport Chip from '@/components/Chip';\nimport styled from 'styled-components';\nimport theme from '@/themes';\nimport { useTranslation } from 'react-i18next';\nimport { withLanguage } from '@/utils/i18n';\nimport { PeopleCircle } from '@/components/People';\n\nconst TradTemplateWrapper = styled.div`\n  .block {\n    margin: ${theme.spacing(1)}px 0;\n  }\n\n  .social {\n    font-size: 24px;\n  }\n\n  .social svg {\n    margin-left: ${theme.spacing(1)}px;\n  }\n`;\n\nconst TradHeader = styled(Grid)`\n\n  .title-box {\n    margin-right: ${theme.spacing(3)}px;\n  }\n  }\n  .title {\n    font-size: 24px;\n    font-weight: 700;\n  }\n`;\n\nconst CandidatesWrapper = styled.div`\n  display: grid;\n  grid-gap: ${theme.spacing(1)}px;\n  grid-template-columns: repeat(4, 1fr);\n`;\n\nconst TradFuncConstituencyTemplate = ({\n  pageContext: { constituency, councillors, candidates, tags },\n}) => {\n  const { t, i18n } = useTranslation();\n\n  return (\n    <TradTemplateWrapper>\n      <TradHeader container>\n        <Grid item>\n          <Grid\n            container\n            direction=\"column\"\n            justify=\"center\"\n            className=\"title-box\"\n          >\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              {t('no_of_seats', { seats: constituency.seats })}\n            </Typography>\n            <div className=\"title\">\n              {withLanguage(i18n, constituency, 'name')}\n            </div>\n          </Grid>\n        </Grid>\n        <Grid item>\n          <Typography variant=\"body1\">\n            {`${t('number_of_voters')} ${\n              constituency.electors_total_2020\n            }（較16年${\n              Number(constituency.electors_total_2020) -\n              Number(constituency.electors_total_2016)\n            }）`}\n          </Typography>\n          <Typography variant=\"body1\">\n            {t('vote_diff')}{' '}\n            {constituency.last_election_vote_beijing_minus_demo}\n          </Typography>\n        </Grid>\n      </TradHeader>\n      <Grid className=\"block\" container>\n        {tags.map(tag => (\n          <Chip label={t(`tag.${tag.i18nKey}`)} variant=\"outlined\" />\n        ))}\n      </Grid>\n      <Typography className=\"block\" variant=\"body2\">\n        {withLanguage(i18n, constituency, 'description')}\n      </Typography>\n      <Typography variant=\"h5\">{t('current_legislator')}</Typography>\n      <Grid container>\n        {councillors.map(c => (\n          <PeopleCircle key={c.node} info={c.node} />\n        ))}\n      </Grid>\n      <Typography variant=\"h5\">{t('intended')}</Typography>\n      <CandidatesWrapper>\n        {candidates\n          .filter(c => c.node.is_2020_candidate === 'TRUE')\n          .map(c => (\n            <PeopleCircle key={c.node} info={c.node} />\n          ))}\n      </CandidatesWrapper>\n    </TradTemplateWrapper>\n  );\n};\n\nexport default TradFuncConstituencyTemplate;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Avatar from '@material-ui/core/Avatar';\nimport { useTranslation } from 'react-i18next';\nimport { withLanguage, getLocalizedPath } from '@/utils/i18n';\nimport { navigate } from 'gatsby';\nimport theme from '@/themes';\n\nconst PeopleWrapper = styled.div`\n  .avatar-group {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-end;\n  }\n\n  ${theme.breakpoints.up('sm')} {\n    .avatar {\n      width: 48px;\n      height: 48px;\n    }\n  }\n\n  ${theme.breakpoints.up('md')} {\n    .avatar {\n      width: 64px;\n      height: 64px;\n    }\n  }\n\n  .avatar.demo {\n    border: 3px ${theme.palette.warning.main} solid;\n  }\n\n  .avatar.beijing {\n    border: 3px ${theme.palette.info.main} solid;\n  }\n\n  .avatar.other {\n    border: 3px ${theme.palette.success.main} solid;\n  }\n\n  .center {\n    font-size: 12px;\n    text-align: center;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n`;\n\nexport const PeopleCircle = ({ info, showName = true }) => {\n  const { i18n } = useTranslation();\n  const name = withLanguage(i18n, info, 'name');\n  return (\n    <PeopleWrapper\n      className=\"avatar-group clickable\"\n      onClick={() => {\n        navigate(getLocalizedPath(i18n, `/profile/${info.uuid}/${name}`));\n      }}\n      onKeyDown={() => {}}\n    >\n      <div className=\"center\">\n        <Avatar\n          className={`avatar ${info.camp.toLowerCase()}`}\n          alt={name}\n          src={info.img_url}\n        />\n        {showName && (\n          <span>{`${name}${info.primary === 'FALSE' ? '*' : ''}`}</span>\n        )}\n      </div>\n    </PeopleWrapper>\n  );\n};\n"],"sourceRoot":""}